<?php
#**************************************************************************************#

				
				#*************************************#
				#********** SANITIZE STRING **********#
				#*************************************#				
				
				/**
				*
				*	Ersetzt potentiell gef√§hrliche Steuerzeichen durch HTML-Entities
				*	Entfernt vor und nach einem String Whitespaces
				*
				*	@params		string	$value		Die zu bereinigende Zeichenkette
				*
				*	@return		string					Die bereinigte Zeichenkette
				*
				*/
				function sanitizeString($value) {
					#********** LOCAL SCOPE START **********#
// if(DEBUG_F)		echo "<p class='debug sanitizeString'>üåÄ<b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value') <i>(" . basename(__FILE__) . ")</i></p>\n";
										
					/*
						SCHUTZ GEGEN EINSCHLEUSUNG UNERW√úNSCHTEN CODES:
						Damit so etwas nicht passiert: <script>alert("HACK!")</script>
						muss der empfangene String ZWINGEND entsch√§rft werden!
						htmlspecialchars() wandelt potentiell gef√§hrliche Steuerzeichen wie
						< > " & in HTML-Code um (&lt; &gt; &quot; &amp;).
						
						Der Parameter ENT_QUOTES wandelt zus√§tzlich einfache ' in &apos; um.
						Der Parameter ENT_HTML5 sorgt daf√ºr, dass der generierte HTML-Code HTML5-konform ist.
						
						Der 1. optionale Parameter regelt die zugrundeliegende Zeichencodierung 
						(NULL=Zeichencodierung wird vom Webserver √ºbernommen)
						
						Der 2. optionale Parameter bestimmt die Zeichenkodierung
						
						Der 3. optionale Parameter regelt, ob bereits vorhandene HTML-Entities erneut entsch√§rft werden
						(false=keine doppelte Entsch√§rfung)
					*/
					$value = htmlspecialchars($value, ENT_QUOTES | ENT_HTML5, 'UTF-8', false);
										
					/*
						trim() entfernt VOR und NACH einem String (aber nicht mitten drin) 
						s√§mtliche sog. Whitespaces (Leerzeichen, Tabs, Zeilenumbr√ºche)
					*/
					$value = trim($value);
					
					// Entsch√§rften und getrimmten String zur√ºckgeben
					
					/*
						Leerstrings aus dem Formular in NULL umwandeln, damit in der DB vorhandene
						NULL-Werte nicht mit Leerstrings √ºberschrieben werden.
					*/
					if($value === '') $value = NULL;
					
					return $value;
					#********** LOCAL SCOPE END **********#
				}
				
				
#**************************************************************************************#


				#*******************************************#
				#********** VALIDATE INPUT STRING **********#
				#*******************************************#
				
				/**
				*
				*	Pr√ºft einen √ºbergebenen String auf Maximall√§nge sowie optional 
				* 	auf Mindestl√§nge und Pflichtangabe.
				*	Generiert Fehlermeldung bei Leerstring und gleichzeitiger Pflichtangabe 
				*	oder bei ung√ºltiger L√§nge.
				*
				*	@param	string		$value											Der zu validierende String
				*	@param	boolean		$mandatory=INPUT_STRING_MANDATORY		Angabe zu Pflichteingabe
				*	@param	integer		$minLength=INPUT_STRING_MIN_LENGTH		Die zu pr√ºfende Mindestl√§nge
				*	@param	integer		$maxLength=INPUT_STRING_MAX_LENGTH		Die zu pr√ºfende Maximall√§nge
				*
				*	@return	string|null														Fehlermeldung | ansonsten NULL
				*
				*/
				function validateInputString(	$value,
														$mandatory=INPUT_STRING_MANDATORY, 
														$minLength=INPUT_STRING_MIN_LENGTH, 
														$maxLength=INPUT_STRING_MAX_LENGTH )
				{
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debug validateInputString'>üåÄ<b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value' [$minLength|$maxLength] mandatory:$mandatory ) <i>(" . basename(__FILE__) . ")</i></p>\n";
					
					
					#********** MANDATORY CHECK **********#
					if( $mandatory === true AND $value === NULL ) {
						// Fehlerfall
						return 'Dies ist ein Pflichtfeld!';
					}
					
					
					#********** MAXIMUM LENGTH CHECK **********#
					/*
						Da die Felder in der Datenbank oftmals eine L√§ngenbegrenzung besitzen,
						die Datenbank aber bei √úberschreiten dieser Grenze keine Fehlermeldung
						ausgibt, sondern alles, das √ºber diese Grenze hinausgeht, stillschweigend 
						abschneidet, muss vorher eine Pr√ºfung auf diese Maximall√§nge durchgef√ºhrt 
						werden. Nur so kann dem User auch eine entsprechende Fehlermeldung ausgegeben
						werden.
					*/
					/*
						mb_strlen() erwartet als Datentyp einen String. Wenn (sp√§ter bei der OOP)
						jedoch ein anderer Datentyp wie Integer oder Float √ºbergeben wird, wirft
						mb_strlen() einen Fehler. Da es ohnehin keinen Sinn macht, einen Zahlenwert
						auf seine L√§nge (Anzahl der Zeichen) zu pr√ºfen, wird diese Pr√ºfung nur f√ºr
						den Datentyp 'String' durchgef√ºhrt.
					*/
					/*
						Wenn man Werte bereits bei der Entgegennahme sanitized, muss man allerdings darauf achten, 
						dass ab nun ggf. HTML-Entit√§ten (also bspw. &amp; &quot; etc.) in den Werten vorhanden sind. 
						Diese m√ºssen bei eventuell nachfolgenden Stringoperationen wie Positionen suchen oder L√§ngen 
						ermitteln ggf. ber√ºcksichtigt werden.
						Hierzu verwendet man die PHP-Funktion htmlspecialchars_decode().
						
						Beispiel: $feldwert = sanitizeString($value);
						Pr√ºfen auf Maximall√§nge: mb_strlen( htmlspecialchars_decode($feldwert, ENT_QUOTES) );
					*/
					/*
						Da die √úbergabe von NULL an PHP-eigene Funktionen in k√ºnftigen PHP-Versionen 
						nicht mehr erlaubt ist, muss vor jedem Aufruf einer PHP-Funktion sichergestellt 
						werden, dass der zu √ºbergebende Wert nicht NULL ist.
					*/
					if( $value !== NULL AND mb_strlen($value) > $maxLength  ) {
						// Fehlerfall
						return "Darf maximal $maxLength Zeichen lang sein!";
					}
					
					
					#********** MINIMUM LENGTH CHECK **********#
					/*
						Es gibt Sonderf√§lle, bei denen eine Mindestl√§nge f√ºr einen Userinput
						vorgegeben ist, beispielsweise bei der Erstellung von Passw√∂rtern.
						Damit nicht-Pflichtfelder aber auch weiterhin leer sein d√ºrfen, muss
						die Mindestl√§nge als Standardwert mit 0 vorbelegt sein.
						
						Bei einem optionalen Feldwert, der gleichzeitig eine Mindestl√§nge
						einhalten muss, darf die Pr√ºfung keine Leersrtings validieren, da 
						diese nie die Mindestl√§nge erf√ºllen und somit der Wert nicht mehr 
						optional w√§re.
					*/
					/*
						mb_strlen() erwartet als Datentyp einen String. Wenn (sp√§ter bei der OOP)
						jedoch ein anderer Datentyp wie Integer oder Float √ºbergeben wird, wirft
						mb_strlen() einen Fehler. Da es ohnehin keinen Sinn macht, einen Zahlenwert
						auf seine L√§nge (Anzahl der Zeichen) zu pr√ºfen, wird diese Pr√ºfung nur f√ºr
						den Datentyp 'String' durchgef√ºhrt.
					*/
					/*
						Da die √úbergabe von NULL an PHP-eigene Funktionen in k√ºnftigen PHP-Versionen 
						nicht mehr erlaubt ist, muss vor jedem Aufruf einer PHP-Funktion sichergestellt 
						werden, dass der zu √ºbergebende Wert nicht NULL ist.
					*/
					if( $value !== NULL AND mb_strlen($value) < $minLength  ) {
						// Fehlerfall
						return "Muss mindestens $minLength Zeichen lang sein!";
					}
					
					
					#********** NO ERROR **********#
					return NULL;
					#********** LOCAL SCOPE END **********#
				}


#**************************************************************************************#


				#*******************************************#
				#********** VALIDATE EMAIL FORMAT **********#
				#*******************************************#				
				
				/**
				*
				*	Pr√ºft einen √ºbergebenen String auf eine valide Email-Adresse und auf Leerstring.
				*	Generiert Fehlermeldung bei ung√ºltiger Email-Adresse oder Leerstring
				*
				*	@param	string	$value							Der zu √ºbergebende String
				*
				*	@return	string|null									Fehlermeldung | ansonsten NULL
				*
				*/
				function validateEmail($value) {
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debug validateEmail'>üåÄ<b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value') <i>(" . basename(__FILE__) . ")</i></p>\n";
					
					
					#********** MANDATORY CHECK **********#
					if( $value === NULL ) {
						// Fehlerfall
						return 'Dies ist ein Pflichtfeld!';
					}
					
					
					#********** VALIDATE EMAIL ADDRESS FORMAT **********#
					if( filter_var( $value, FILTER_VALIDATE_EMAIL ) === false ) {
						// Fehlerfall
						return 'Dies ist keine g√ºltige Email-Adresse!';
					}
					
					
					#********** NO ERROR **********#
					return NULL;
					#********** LOCAL SCOPE END **********#
				}


#**************************************************************************************#


				#*******************************************#
				#********** VALIDATE IMAGE UPLOAD **********#
				#*******************************************#
				
				/**
				*
				*	Validiert ein auf den Server hochgeladenes Bild auf korrekten und erlaubten MIME-Type, 
				*	auf Bildtyp, Bildgr√∂√üe in Pixeln, Dateigr√∂√üe in Bytes sowie den Header auf Plausibilit√§t.
				*	Generiert einen unique Dateinamen sowie eine sichere Dateiendung und verschiebt das Bild 
				*	in das Zielverzeichnis.
				*
				*	@param	string	$fileTemp															Der tempor√§re Pfad zum hochgeladenen Bild im Quarant√§neverzeichnis
				*	@param	integer	$imageMaxWidth				=IMAGE_MAX_WIDTH					Die maximal erlaubte Bildbreite in Pixeln				
				*	@param	integer	$imageMaxHeight			=IMAGE_MAX_HEIGHT					Die maximal erlaubte Bildh√∂he in Pixeln
				*	@param	integer	$imageMinSize				=IMAGE_MIN_SIZE					Die minimal erlaubte Dateigr√∂√üe in Bytes
				*	@param	integer	$imageMaxSize				=IMAGE_MAX_SIZE					Die maximal erlaubte Dateigr√∂√üe in Bytes
				*	@param	array		$imageAllowedMimeTypes	=IMAGE_ALLOWED_MIME_TYPES		Whitelist der zul√§ssigen MIME-Types mit den zugeh√∂rigen Dateiendungen
				*	@param	string	$imageUploadPath			=IMAGE_UPLOAD_PATH				Das Zielverzeichnis
				*
				*	@return	array		{'imagePath'	=>	String|NULL, 								Bei Erfolg der Speicherpfad zur Datei im Zielverzeichnis | bei Fehler NULL
				*							 'imageError'	=>	String|NULL}								Bei Erfolg NULL | Bei Fehler Fehlermeldung
				*
				*/
				function validateImageUpload( $fileTemp,
														$imageMaxWidth 			= IMAGE_MAX_WIDTH,
														$imageMaxHeight 			= IMAGE_MAX_HEIGHT,
														$imageMinSize 				= IMAGE_MIN_SIZE,
														$imageMaxSize 				= IMAGE_MAX_SIZE,
														$imageAllowedMimeTypes 	= IMAGE_ALLOWED_MIME_TYPES,
														$imageUploadPath 			= IMAGE_UPLOAD_PATH )
				{
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debug validateImageUpload'>üåÄ<b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$fileTemp') <i>(" . basename(__FILE__) . ")</i></p>\n";
					
					
					#**************************************************************************#
					#********** I. GATHER INFORMATION FOR IMAGE FILE VIA FILE HEADER **********#
					#**************************************************************************#
					
					/*
						FILE HEADER
						
						Die Informationen, die immer in jedem Bildheader oder Dateiheader eines Bildes vorhanden sind, k√∂nnen 
						je nach dem spezifischen Bildformat variieren. Es gibt jedoch einige grundlegende Informationen, die in 
						den meisten g√§ngigen Bildformaten vorkommen und als Pflichtangaben angesehen werden. 
						Zu den typischen Pflichtangaben geh√∂ren:

						- Dateisignatur (MIME TYPE): Jedes Bildformat hat eine eindeutige Dateisignatur, die am Anfang der Datei steht und 
						  auf das Format hinweist. Die Dateisignatur ist entscheidend, um das Dateiformat zu identifizieren.

						- Dateigr√∂√üe: Die Gr√∂√üe der Bilddatei in Bytes oder Kilobytes ist in den meisten Dateiheadern enthalten. 
						  Dies ist wichtig f√ºr die Speicherplatzverwaltung und das Einlesen der Datei.

						- Bildabmessungen: Informationen √ºber die Breite und H√∂he des Bildes in Pixeln sind entscheidend, um die 
						  richtige Darstellung des Bildes zu gew√§hrleisten. Diese Informationen sind nahezu immer im Dateiheader vorhanden.

						- Farbtiefe: Die Farbtiefe gibt an, wie viele Farben pro Pixel im Bild dargestellt werden k√∂nnen. 
						  Bei RGB-Bildern betr√§gt die √ºbliche Farbtiefe 24 Bit (8 Bit pro Kanal), was 16,7 Millionen Farben entspricht. 
						  Dies ist eine grundlegende Information im Header.
											  
						  Diese Angaben sind in den meisten g√§ngigen Bildformaten zu finden und gelten als grundlegende Pflichtangaben im 
						  Dateiheader. 
					*/
					/*
						Die Funktion getimagesize() liest den Dateiheader einer Bilddatei aus und 
						liefert bei g√ºltigem MIME Type ('image/...') ein gemischtes Array zur√ºck:
						
						[0] 				Bildbreite in PX (Bildabmessungen)
						[1] 				Bildh√∂he in PX  (Bildabmessungen)
						[3] 				Einen f√ºr das HTML <img>-Tag vorbereiteten String (width="480" height="532") 
						['bits']			Anzahl der Bits pro Kanal (Farbtiefe)
						['channels']	Anzahl der Farbkan√§le (somit auch das Farbmodell: RGB=3, CMYK=4) 
						['mime'] 		MIME Type
						
						Bei ung√ºltigem MIME Type (also nicht 'image/...') liefert getimagesize() false zur√ºck
					*/	
					
					$imageDataArray = getimagesize($fileTemp);
					
// if(DEBUG_F)		echo "<pre class='debug value validateImageUpload'><b>Line " . __LINE__ . "</b>: \$imageDataArray<br>". print_r($imageDataArray, true) . "<i>(" . basename(__FILE__) . ")</i>:</pre>\n";
					
					
					#********** 1. CHECK FOR VALID MIME TYPE **********#
					if( $imageDataArray === false ) {
						// 1. Fehlerfall: MIME TYPE IS NO VALID IMAGE MIME TYPE
						return array( 'imagePath' => NULL, 'imageError' => 'Dies ist keine g√ºltige Bilddatei!' );	
						
					} elseif( is_array($imageDataArray) === true ) {
						// Erfolgsfall: MIME TYPE IS A VALID IMAGE MIME TYPE
						
						/*
							SONDERFALL NUMBER (NUMERIC STRINGS):
							Da wir aus Formularen und anderen Usereingaben alle Werte immer
							als Datentyp String erhalten, macht eine Pr√ºfung auf einen konkreten
							numerischen Datentyp in PHP nur selten Sinn.
							
							Anstatt mittels is_int() direkt auf den Datentyp Integer zu pr√ºfen,
							ist es besser, einen empfangenen String auf sein inhaltliches Format 
							zu pr√ºfen: Ist der String numerisch und entspricht sein Wert einem Integer?

							Die Funktion filter_var() kann mittels eines regul√§ren Ausdrucks, der √ºber
							eine Konstante gesteuert wird, auch einen String auf den Inhalt 'Integer' oder
							'Float' √ºberpr√ºfen.

							Entspricht der mittels filter_var() gepr√ºfte Wert dem zu pr√ºfenden Datenformat,
							nimmt filter_var automatisch eine Typumwandlung vor und liefert den umgewandelten 
							Wert zur√ºck.
						*/						
						$imageWidth 	= filter_var($imageDataArray[0], FILTER_VALIDATE_INT);
						$imageHeight 	= filter_var($imageDataArray[1], FILTER_VALIDATE_INT);
						$imageMimeType = sanitizeString($imageDataArray['mime']);
						$fileSize 		= fileSize($fileTemp);
						/*
							Das Auslesen der Header-Eintr√§ger 'bits' und 'channels' sollte √ºberlegt sein,
							da diese beiden Angaben im Header auch bei validen Bildtypen durchaus fehlen k√∂nnten.
							In diesem Fall g√§be es diese Indizes nicht, und wir bek√§men an dieser Stelle eine
							Fehlermeldung 'Undefined array key 'bits' oder 'channels'.
							
							$imageColorBits		= filter_var($imageDataArray['bits'], FILTER_VALIDATE_INT);
							$imageColorChannels	= filter_var($imageDataArray['channels'], FILTER_VALIDATE_INT);
						*/
						
if(DEBUG_F)			echo "<p class='debug value validateImageUpload'><b>Line " . __LINE__ . "</b>: \$imageWidth: $imageWidth px <i>(" . basename(__FILE__) . ")</i></p>\n";
if(DEBUG_F)			echo "<p class='debug value validateImageUpload'><b>Line " . __LINE__ . "</b>: \$imageHeight: $imageHeight px <i>(" . basename(__FILE__) . ")</i></p>\n";
if(DEBUG_F)			echo "<p class='debug value validateImageUpload'><b>Line " . __LINE__ . "</b>: \$imageMimeType: $imageMimeType <i>(" . basename(__FILE__) . ")</i></p>\n";
if(DEBUG_F)			echo "<p class='debug value validateImageUpload'><b>Line " . __LINE__ . "</b>: \$fileSize: $fileSize Byte <i>(" . basename(__FILE__) . ")</i></p>\n";
						
					} // I. GATHER INFORMATION FOR IMAGE FILE VIA FILE HEADER END
					#*********************************************************************************#
					
					
					#******************************************#
					#********** II. IMAGE VALIDATION **********#
					#******************************************#
					
					
					#********** 2. VALIDATE PLAUSIBILITY OF FILE HEADER **********#
					/*
						Diese Pr√ºfung setzt darauf, dass ein maniplulierter Dateiheader nicht konsequent
						gef√§lscht wurde:
						Ein Hacker √§ndert den MimeType einer Textdatei mit Schadcode aud 'image/jpg', vergisst
						aber beispielsweise, zus√§tzlich weitere Eintr√§ge wie 'imageWidth' oder 'imageHeight' 
						hinzuzuf√ºgen.
						
						Da wir den Datentyp eines im Dateiheader fehlenden Wertes nicht kennen (NULL, '', 0), 
						wird an dieser Stelle ausdr√ºcklich nicht typsicher, sondern auf 'falsy' gepr√ºft.
						Ein ! ('NOT') vor einem Wert oder einer Funktion negiert die Auswertung: Die Bedingung 
						ist erf√ºllt, wenn die Auswertung false ergibt.
					*/
					if( !$imageWidth OR !$imageHeight OR !$imageMimeType OR $fileSize < $imageMinSize ) {
						// 2. Fehlerfall: NON PLAUSIBLE HEADER
						return array( 'imagePath' => NULL, 'imageError' => 'Verd√§chtiger Dateiheader!' );
					}
					
					
					#********** 3. VALIDATE IMAGE MIME TYPES **********#
					// WHITELIST mit erlaubten MIME TYPES
					// $imageAllowedMimeTypes = array('image/jpg' => '.jpg', 'image/jpeg' => '.jpg', 'image/png' => '.png', 'image/gif' => '.gif');
					/*
						- Die Funktion in_array() pr√ºft, ob eine √ºbergebene Needle einem Wert (value) innerhalb 
						  eines zu √ºbergebenden Arrays entspricht.
						  
						- Die Funktion array_key_exists() pr√ºft, ob eine √ºbergebene Needle einem Index (key) innerhalb 
						  eines zu √ºbergebenden Arrays entspricht.
					*/
					if( array_key_exists( $imageMimeType, $imageAllowedMimeTypes ) === false ) {
						// 3. Fehlerfall: MIME TYPE IS NOT ALLOWED
						return array( 'imagePath' => NULL, 'imageError' => 'Dies ist kein erlaubter Bildtyp!' );
					}
					
					
					#********** 4. VALIDATE IMAGE WIDTH **********#
					if( $imageWidth > $imageMaxWidth ) {
						// 4. Fehlerfall: IMAGE WIDTH TOO BIG
						return array( 'imagePath' => NULL, 'imageError' => "Die Bildbreite darf maximal $imageMaxWidth Pixel betragen!" );
					}					
					
					
					#********** 5. VALIDATE IMAGE HEIGHT **********#
					if( $imageHeight > $imageMaxHeight ) {
						// 5. Fehlerfall: IMAGE HEIGHT TOO BIG
						return array( 'imagePath' => NULL, 'imageError' => "Die Bildh√∂he darf maximal $imageMaxHeight Pixel betragen!" );
					}					
					
					
					#********** 6. VALIDATE FILE SIZE **********#
					if( $fileSize > $imageMaxSize ) {
						// 6. Fehlerfall: FILE SIZE TOO BIG
						return array( 'imagePath' => NULL, 'imageError' => 'Die Dateig√∂√üe darf maximal ' . $imageMaxSize/1024 . 'Kb betragen!' );
					
					} // II. IMAGE VALIDATION END
					#*********************************************************************************#
					
					
					#***************************************************************#
					#********** III. PREPARE IMAGE FOR PERSISTANT STORAGE **********#
					#***************************************************************#
					
					#********** 1. GENERATE UNIQUE FILE NAME **********#
					/*
						Da der Dateiname selbst Schadcode in Form von ung√ºltigen oder versteckten Zeichen,
						doppelte Dateiendungen (dateiname.exe.jpg) etc. beinhalten kann, dar√ºberhinaus ohnehin 
						s√§mtliche, nicht in einer URL erlaubten Sonderzeichen und Umlaute entfernt werden m√ºssten 
						sollte der Dateiname aus Sicherheitsgr√ºnden komplett neu generiert werden.
						
						Hierbei muss au√üerdem bedacht werden, dass die jeweils generierten Dateinamen unique
						sein m√ºssen, damit die Dateien sich bei gleichem Dateinamen nicht gegenseitig √ºberschreiben.
					*/
					/*
						- 	mt_rand() stellt die verbesserte Version der Funktion rand() dar und generiert 
							Zufallszahlen mit einer gleichm√§√üigeren Verteilung √ºber das Wertesprektrum. Ohne zus√§tzliche
							Parameter werden Zahlenwerte zwischen 0 und dem h√∂chstm√∂glichem von mt_rand() verarbeitbaren 
							Zahlenwert erzeugt.
							
						- 	str_shuffle() mischt die Zeichen eines √ºbergebenen Strings zuf√§llig durcheinander.
						
						- 	microtime() liefert einen Timestamp mit Millionstel Sekunden zur√ºck (z.B. '0.57914300 163433596'),
							aus dem f√ºr eine URL-konforme Darstellung der Dezimaltrenner und das Leerzeichen entfernt werden.
					*/
					$fileName = mt_rand() . str_shuffle('0123456789_-abcdefghikbgnegknrewkfjbklnjklmnopqrstuvwxyz-_0123456789') . str_replace(array('.', ' '), '', microtime());


					#********** 2. GENERATE FILE EXTENSION **********#
					/*
						Aus Sicherheitsgr√ºnden wird nicht die urspr√ºngliche Dateinamenerweiterung aus dem
						Dateinamen verwendet, sondern eine vorgenerierte Dateiendung aus dem Array der 
						erlaubten MIME Types.
						Die Dateiendung wird anhand des ausgelesenen MIME Types [key] ausgew√§hlt.
					*/
					$fileExtension = $imageAllowedMimeTypes[$imageMimeType];
// if(DEBUG_F)		echo "<p class='debug value validateImageUpload'><b>Line " . __LINE__ . "</b>: \$fileExtension: '<i>$fileExtension</i>' <i>(" . basename(__FILE__) . ")</i></p>\n";

					
					#********** 3. GENERATE FILE TARGET **********#
					/*
						Endg√ºltigen Speicherpfad auf dem Server generieren:
						'destinationPath/fileName.fileExtension'
					*/
					$fileTarget = $imageUploadPath . $fileName . $fileExtension;

if(DEBUG_F)		echo "<p class='debug value validateImageUpload'><b>Line " . __LINE__ . "</b>: L√§nge: " . mb_strlen($fileTarget) . " <i>(" . basename(__FILE__) . ")</i></p>\n";				
if(DEBUG_F)		echo "<p class='debug value validateImageUpload'><b>Line " . __LINE__ . "</b>: \$fileTarget: '<i>$fileTarget</i>' <i>(" . basename(__FILE__) . ")</i></p>\n";
					
					// III. PREPARE IMAGE FOR PERSISTANT STORAGE END
					#*****************************************************************#
					
					
					#*********************************************************#
					#********** IV. MOVE IMAGE TO FINAL DESTINATION **********#
					#*********************************************************#
					/*
						move_uploaded_file() verschiebt eine hochgeladene Datei an einen 
						neuen Speicherort und benennt die Datei um
					*/
					/*
						Ein @ vor einem Funktionsaufruf unterdr√ºckt die Ausgabe der von dieser
						Funktion generierten Fehlermeldung im Frontend
					*/
					if( @move_uploaded_file( $fileTemp, $fileTarget ) === false ) {
						// 7. Fehlerfall: IMAGE CANNOT BE MOVED
if(DEBUG_F)			echo "<p class='debug err validateImageUpload'><b>Line " . __LINE__ . "</b>: FEHLER beim verschieben der Datei von '<i>$fileTemp</i>' nach '<i>$fileTarget</i>'! <i>(" . basename(__FILE__) . ")</i></p>\n";
						
						// TODO: Eintrag in ErrorLog | Email an SysAdmin						
						return array( 'imagePath' => NULL, 'imageError' => 'Es ist ein Fehler aufgetreten! Bitte kontaktieren Sie unseren Support.' );
					
					} else {
						// Erfolgsfall
if(DEBUG_F)			echo "<p class='debug ok validateImageUpload'><b>Line " . __LINE__ . "</b>: Datei erfolgreich von '<i>$fileTemp</i>' nach '<i>$fileTarget</i>' verschoben. <i>(" . basename(__FILE__) . ")</i></p>\n";
						
						return array( 'imagePath' => $fileTarget, 'imageError' => NULL );
					}
					// IV. MOVE IMAGE TO FINAL DESTINATION END
					#*****************************************************************#
					
					#********** LOCAL SCOPE END **********#
				}


#**************************************************************************************#